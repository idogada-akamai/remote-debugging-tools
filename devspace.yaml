version: v2beta1
name: generic-config

pipelines:
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev app                # 4. Start dev mode "app" (see "dev" section)
  debug:
    flags:
      - name: service
        description: The value of the service selector label of the deployment in Kubernetes
        type: string
      - name: entrypoint
        description: The entrypoint to run in the container
        type: string

    run: |-
      service=$(get_flag service)
      entrypoint=$(get_flag entrypoint)
      entrypoint=${entrypoint:-dist/index.js}

      if ! is_empty $service; then
        start_dev app \
          --from base \
          --set app:labelSelector.service=$service \
          --set app:env[0].name=ENTRYPOINT \
          --set app:env[0].value="$entrypoint"
      else
        echo "service flag must be set"
        exit 1
      fi

dev:
  base:
    labelSelector:
      service: base
  app:
    labelSelector:
      service: ${SERVICE}
    sync:
      - path: ./src:src
        disableUpload: true
    terminal:
      command: |-
        bash -c '
        set -e # Stop on errors
        trap 'exit 1' INT

        COLOR_BLUE="\033[0;94m"
        COLOR_RESET="\033[0m"

        # Print useful output for user
        echo -e "${COLOR_BLUE}Welcome to your development container!${COLOR_RESET}"

        # Include project's bin/ folder in PATH
        export PATH="./bin:$PATH"

        echo -e "${COLOR_BLUE}Rewriting src folder contet...${COLOR_RESET}"
        temp_dir=$(mktemp -d)
        cp -r src/* $temp_dir
        cp -r $temp_dir/* src
        rm -r $temp_dir

        echo -e "${COLOR_BlUE}Starting the application...${COLOR_RESET}"
        node --inspect-brk=9229 $ENTRYPOINT
        '

    ssh:
      enabled: false
    proxyCommands:
      - command: devspace
      - command: kubectl
      - command: helm
      - gitCredentials: true
    ports:
      - port: "9229"

commands:
  debug:
    command: |-
      #!/usr/bin/env bash
      set -e

      echoerr() { echo "$@" 1>&2; }

      select_interactive() {
          question=$1
          var=$2
          options="${@:2}"

          image=idogakamai/remote-debugging-tools:0.1
          tmpfile=$(mktemp)

          docker run --platform linux/amd64 --rm -it -v $tmpfile:/app/selection.txt $image -q "$question" -o $options
          choice=$(cat $tmpfile)

          if [[ -z $choice ]]; then
              echoerr "No choice has been selected"
              exit 1
          fi

          # Cleanup
          rm $tmpfile

          # Set variable value
          # declare "${var}"="$choice"
          eval "$var='$choice'"
      }

      get_repo_name() {
          echo $(basename "$PWD")
      }

      get_repo_deployment() {
          context=$1
          namespace=$2
          repo=$3

          regex_pattern="pageintegrity.azurecr.io/pi-core/$repo:.*"
          json_path='{range .items[*]}{.metadata.name}{"$"}{.spec.template.spec.containers[0].image}{"\n"}{end}'

          # Using grep and cut because we can't rely on jq being installed the users machines
          deployment=$(
              kubectl --context=$context --namespace=$namespace get deployment -o jsonpath="$json_path" |
                  grep "$regex_pattern" |
                  cut -d "$" -f 1
          )

          if [[ -z $deployment ]]; then
              echoerr "No deployment for repo $repo was found"
              exit 1
          fi

          echo $deployment

      }

      get_deployment_label_selector() {
          context=$1
          namespace=$2
          deployment=$3
          selector_label=$4

          json_path="{.spec.selector.matchLabels.$selector_label}"
          selector=$(kubectl --context=$context --namespace=$namespace get deploy $deployment -o jsonpath=$json_path)

          echo $selector
      }

      start_debugging_session() {
          context=$1
          namespace=$2
          deployment=$3
      }

      NAMESPACE="app"
      SELECTOR_LABEL="service"

      # Get the cluster name
      select_interactive \
          "Please select the cluster to debug" \
          "CONTEXT" \
          $(kubectl config get-contexts -o=name | sort -n | grep -i 'dev\|stg')

      REPO=$(get_repo_name)

      DEPLOYMENT=$(get_repo_deployment $CONTEXT $NAMESPACE $REPO)
      if [[ $DEPLOYMENT =~ " " ]]; then
          echo "More than 1 matching deployment for your repo have been found."
          select_interactive \
              "Please select the one you wish to dubug" \
              "DEPLOYMENT" \
              $DEPLOYMENT
      fi

      echo "Deployment $DEPLOYMENT is matching your repo"

      SELECTOR=$(get_deployment_label_selector $CONTEXT $NAMESPACE $DEPLOYMENT $SELECTOR_LABEL)
      echo "You deployment selector is: $SELECTOR"

      echo "Starting dev container, run reset-pods.sh in your current directory to resume the deployment."
      echo "devspace --kube-context $CONTEXT --namespace $NAMESPACE reset pods" >reset-pods.sh
      chmod +x reset-pods.sh

      devspace --kube-context $CONTEXT --namespace $NAMESPACE run-pipeline debug --service $SELECTOR $@
    description: Launch debugging wizard and start debugging session
